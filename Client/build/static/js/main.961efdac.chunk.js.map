{"version":3,"sources":["History.js","GoogleLogin.js","Components/Lists.js","Components/Maincontent.js","App.js","Routing.js","serviceWorker.js","index.js"],"names":["history","Google","onSuccessHandler","googleusercontent","console","log","googleId","push","pathname","state","onFailureHandler","error","alert","className","style","clientId","buttonText","theme","icon","onSuccess","this","onFailure","cookiePolicy","Component","List","props","listOfItems","map","item","i","key","onClick","delete","Maincontent","inputHandler","e","setState","cur_item","target","value","addHandler","a","preventDefault","task","id","user_id","body","fetch","method","headers","JSON","stringify","response","json","data","tasks","obj","list","deleteHandler","itemToDelete","updated","filter","undefined","location","Ca","window","localStorage","setItem","getItem","type","placeholder","onChange","App","Routing","path","exact","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.961efdac.chunk.js","sourcesContent":["import {createBrowserHistory as history} from 'history';\r\n\r\nexport default history();","import GoogleLogin from 'react-google-login'\r\nimport React,{Component} from 'react'\r\nimport history from './History'\r\nimport './App.css'\r\n\r\nclass Google extends Component{\r\n    onSuccessHandler=(googleusercontent)=>{\r\n        console.log(googleusercontent.googleId)\r\n        history.push({\r\n            pathname:\"/app\",\r\n            state : { googleusercontent } \r\n        })\r\n    }\r\n\r\n    onFailureHandler=(error)=>{\r\n        console.log(error)\r\n        alert(\"Something Went wrong\")\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"main_content1\">\r\n                <div>\r\n                <h1 className=\"heading\">Login to Todo App</h1>\r\n                <div style={{\"textAlign\":\"center\"}}>\r\n                \r\n                <GoogleLogin className=\"google\" clientId=\"643033791342-jrqgv98qa2375ahr8ofb5imdfrls5f5i.apps.googleusercontent.com\"\r\n                buttonText=\"login\"\r\n                theme=\"dark\"\r\n                icon=\"false\"\r\n                onSuccess={this.onSuccessHandler}\r\n                onFailure={this.onFailureHandler}\r\n                cookiePolicy={'single_host_origin'}\r\n                />\r\n                </div>\r\n            </div>\r\n\r\n            </div>\r\n         \r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default Google","import React from 'react'\r\n\r\nconst List=(props)=>{\r\n    const Items=props.props\r\n    const listOfItems=Items.map((item,i) =>{\r\n            return <div key={i} className=\"list\">\r\n                <p>{item}</p>\r\n                <span onClick={()=>props.delete({item})}>&times;</span>\r\n            </div>\r\n        }) \r\n    \r\n    return (\r\n        <div className=\"list-bg\">\r\n            {listOfItems}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default List\r\n","import React , {Component} from 'react'\r\n\r\nimport List from './Lists'\r\nimport './Main_content_style.css'\r\n\r\n\r\nclass Maincontent extends Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n        if(props.props.location.state !== undefined){\r\n            this.user_id=props.props.location.state.googleusercontent.Ca;\r\n            window.localStorage.setItem(\"user_id\",this.user_id);\r\n        }else{\r\n            this.user_id=window.localStorage.getItem(\"user_id\");\r\n        }\r\n        this.state={\r\n            list:[],\r\n            cur_item:\"\"\r\n        }\r\n    }\r\n\r\n    inputHandler=(e)=>{\r\n        this.setState({\r\n            cur_item:e.target.value\r\n        })\r\n       \r\n    }\r\n\r\n    async componentDidMount(){\r\n        try {\r\n            const response = await fetch(`http://localhost:8000/${this.user_id}`);\r\n            const data = await response.json();\r\n            const tasks = data.map(obj => obj.task) \r\n            this.setState({\r\n                list:tasks,\r\n                cur_item:\"\"\r\n            })\r\n        }catch(err){\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n\r\n    addHandler=async e =>{\r\n        e.preventDefault();\r\n        try{\r\n            let task = this.state.cur_item\r\n            let id = this.user_id\r\n            const body = {task,id}\r\n            const response = await fetch(\"http://localhost:8000/\",{\r\n                method : \"POST\",\r\n                headers : {\"Content-Type\" : \"application/json\"},\r\n                body : JSON.stringify(body)\r\n            })\r\n            //console.log(response)\r\n        }catch(err){\r\n            console.log(err)\r\n        }\r\n        \r\n        try {\r\n            const response = await fetch(`http://localhost:8000/${this.user_id}`);\r\n            const data = await response.json();\r\n            const tasks = data.map(obj => obj.task) \r\n            this.setState({\r\n                list:tasks,\r\n                cur_item:\"\"\r\n            })\r\n        }catch(err){\r\n            console.log(err)\r\n        }\r\n        \r\n    }\r\n\r\n    deleteHandler= async item=>{\r\n        try{\r\n            const itemToDelete=[this.user_id,item.item]\r\n            const deleted = await fetch(`http://localhost:8000/${itemToDelete}`,{\r\n                method : \"DELETE\"\r\n            });\r\n            //console.log(deleted)\r\n        }catch(err){\r\n            console.log(err)\r\n        }\r\n        //console.log(this.state.list)\r\n        const updated = this.state.list.filter(task => task !== item.item)\r\n        this.setState({\r\n            list:updated\r\n        })\r\n        \r\n    }\r\n\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"main_content\">\r\n                <div className=\"header\">\r\n                    <input type=\"text\" value={this.state.cur_item} placeholder=\"Enter Text\" onChange={this.inputHandler}/>\r\n                    <button onClick={this.addHandler}>Add</button>\r\n                </div>\r\n                <List props={this.state.list} delete={this.deleteHandler}></List>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Maincontent","import React from 'react';\nimport './App.css';\nimport history from './History'\nimport Maincontent from './Components/Maincontent'\n\nfunction App() {\n\n  return (\n    <div>\n      <h1>Todo List</h1>\n      <Maincontent props={history}/>\n    </div>\n  );\n}\n\nexport default App;\n","import {Route,Switch,Router} from 'react-router-dom'\r\nimport Google from './GoogleLogin'\r\nimport history from './History'\r\nimport App from './App'\r\nimport React ,{Component} from 'react'\r\n\r\nclass Routing extends Component{\r\n    \r\n    render(){\r\n        return (\r\n            <Router history={history}>\r\n                <Switch>\r\n                    <Route path=\"/\" exact component={Google}/>\r\n                    <Route path=\"/App\" component={App}/>\r\n                </Switch>\r\n            </Router>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Routing","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter} from 'react-router-dom';\nimport Routing from './Routing';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n       <Routing />\n  </BrowserRouter>,\n   \n\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}